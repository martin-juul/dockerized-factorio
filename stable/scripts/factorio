#!/bin/sh

# Original source: https://raw.githubusercontent.com/Bisa/factorio-init/master/factorio
# Modified for use with dockerized-factorio

debug() {
    if [ ${DEBUG} -gt 0 ]; then
        echo "DEBUG: $@" >&2
    fi
}

# Load config file
source "/srv/dockerized-factorio/scripts/config"

# Slim defaults check/load
if [ -z "${SERVICE_NAME}" ]; then
  echo "Couldn't load config file, please edit config.example and rename it to config"
  exit 1
fi

if [ -z "${NONCMDPATTERN}" ]; then
  NONCMDPATTERN='(^\s*(\s*[0-9]+\.[0-9]+|\)|\())|(Players:$)'
fi

case "$1" in
    install|help|listcommands|version|"")
        ;;
    *)
    if [ -z ${FCONF} ]; then
        FCONF="${FACTORIO_PATH}/config/config.ini"
    fi

    if ! [ -e "${SERVER_SETTINGS}" ]; then
      echo "Could not find factorio server settings file: ${SERVER_SETTINGS}"
      echo "A sample is in the container volume at sample/server-settings.sample.json"
      echo "Put it in data/server-settings.json with your modifications."
      exit 1
    fi

    if ! [ -e ${FCONF} ]; then
      echo "Could not find factorio config file: ${FCONF}"
      echo "If this is the first time you run this script you need to generate the config.ini by starting the server manually."
      echo "(also make sure you have a save to run or the server will not start)"
      echo
      echo "Create save: su-exec ${F_USER}:${F_GROUP} ${FBINARY} --create ${FACTORIO_PATH}/saves/my_savegame"
      echo "Start server: su-exec ${F_USER}:${F_GROUP} ${BINARY} --start-server-load-latest"
      echo
      echo "(If you rather store the config.ini in another location, set FCONF='/your/path' in this scripts config file)"
      exit 1
    fi

    if [ -z "${WRITE_DIR}" ]; then
      # figure out the write-data path (where factorio looks for saves and mods)
      # Note - this is a hefty little operation, possible cause of head ache down the road
      # as it relies on the factorio write dir to live ../../ up from the binary if __PATH__executable__
      # is used in the config file.. for now, that's the default so cross your fingers it will not change ;)
      debug "Determining WRITE_DIR based on ${FCONF}, IF you edited write-data from the default, this probably fails"
      WRITE_DIR=$(dirname "$(echo `grep "^write-data=" "$FCONF"` |cut -d'=' -f2 |sed -e 's#__PATH__executable__#'$(dirname "$BINARY")/..'#g')")
    fi
    debug "write path: $WRITE_DIR"

    PIDFILE="${WRITE_DIR}/server.pid"

    if [ -z "${FIFO}" ];then
      FIFO="${WRITE_DIR}/server.fifo"
    fi

    if [ -z "${CMDOUT}" ];then
      CMDOUT="${WRITE_DIR}/server.out"
    fi

    if [ -z "${SAVELOG}" ]; then
      SAVELOG=0
    fi

    # Finally, set up the invocation
    INVOCATION="${BINARY} --config ${FCONF} --port ${PORT} --start-server-load-latest --server-settings ${SERVER_SETTINGS} ${RCON} ${EXTRA_BINARGS}"
    ;;
esac

usage(){
  echo "Usage: $0 COMMAND"
  echo
  echo "Available commands:"
  echo -e "   start \t\t\t\t Starts the server"
  echo -e "   stop \t\t\t\t Stops the server"
  echo -e "   restart \t\t\t\t Restarts the server"
  echo -e "   status \t\t\t\t Displays server status"
  echo -e "   players-online \t\t\t Shows online players"
  echo -e "   players \t\t\t\t Shows all players"
  echo -e "   cmd [command/message] \t\t Open interactive commandline or send a single command to the server"
  echo -e "   chatlog [--tail|-t] \t\t\t Print the current chatlog, optionally tail the log to follow in real time"
  echo -e "   new-game name [map-gen-settings] [map-settings] \t Stops the server and creates a new game with the specified name using the specified map gen settings and map settings json files"
  echo -e "   save-game name \t\t\t Stops the server and saves game to specified save"
  echo -e "   load-save name \t\t\t Stops the server and loads the specified save"
  echo -e "   install [tarball] \t\t\t Installs the server with specified tarball"
  echo -e "   invocation \t\t\t\t Outputs the invocation for debugging purpose"
  echo -e "   listcommands \t\t\t List all init-commands"
  echo -e "   listsaves \t\t\t\t List all saves"
  echo -e "   version \t\t\t\t Prints the binary version"
  echo -e "   help \t\t\t\t Shows this help message"
}

ME=(whoami)
as_user() {
  if [ $ME == $USERNAME ]; then # Are we the factorio user?
    sh -c "$1"
  elif [ "$(id -u)" == "0" ]; then # Are we root?
    su-exec $USERNAME -s /bin/sh -c "$1"
  else
    # To prevent odd permission behaviour,
    # do not modify the service configuration or the factorio user.
    echo "Run this script as the $USERNAME user!"
    exit 1
  fi
}

is_running() {
  if [ -e ${PIDFILE} ]; then
    if kill -0 $(cat ${PIDFILE}) 2> /dev/null; then
      debug "${SERVICE_NAME} is running with pid $(cat ${PIDFILE})"
      return 0
    else
      debug "Found ${PIDFILE}, but the server is not running. It's possible that your server has crashed"
      debug "Check the log for details"
      rm ${PIDFILE} 2> /dev/null
      return 2
    fi
  fi
  return 1
}

start_service() {
  if [ -e ${PIDFILE} ]; then
    ps -p $(cat ${PIDFILE}) > /dev/null 2>&1
    if [ "$?" -eq "0" ]; then
      echo "${SERVICE_NAME} is already running!"
      return 1
    fi
    debug "Found rogue pid file, server might have crashed"
    rm ${PIDFILE} 2> /dev/null
  fi

  if ! check_permissions; then
    echo "Error! Incorrect permissions, unable to write to ${WRITE_DIR}"
    return 1
  fi

  if [ "${SAVELOG}" ==  "0" ]; then
    debug "Erasing log ${CMDOUT}"
    echo "" > ${CMDOUT}
  fi

  as_user "tail -f ${FIFO} |${INVOCATION} >> ${CMDOUT} 2>&1 & echo \$! > ${PIDFILE}"

  ps -p $(cat ${PIDFILE}) > /dev/null 2>&1
  if [ "$?" -ne "0" ]; then
    echo "Unable to start ${SERVICE_NAME}"
    return 1
  else
    echo "Started ${SERVICE_NAME}, please see log for details"
  fi
}

stop_service() {
  if [ -e ${PIDFILE} ]; then
    echo -n "Stopping ${SERVICE_NAME}: "
    if kill -TERM $(cat ${PIDFILE} 2> /dev/null) 2> /dev/null; then
      sec=1
      while [ "$sec" -le 15 ]; do
        if [ -e ${PIDFILE} ]; then
          if kill -0 $(cat ${PIDFILE} 2> /dev/null) 2> /dev/null; then
            echo -n ". "
            sleep 1
          else
            break
          fi
        else
          break
        fi
        sec=$(($sec+1))
      done
    fi

    if kill -0 $(cat ${PIDFILE} 2> /dev/null) 2> /dev/null; then
      echo "Unable to shut down nicely, killing the process!"
      kill -KILL $(cat ${PIDFILE} 2> /dev/null) 2> /dev/null
    else
      echo "complete!"
    fi

    # Start the reader (in case tail stopped already)
    cat ${FIFO} &
    # Open pipe for writing.
    exec 3> ${FIFO}
    # Write a newline to the pipe, this triggers a SIGPIPE and causes tail to exit
    echo "" >&3
    # Close pipe.
    exec 3>&-

    rm ${PIDFILE} 2> /dev/null
    return 0 # we've either shut down gracefully or killed the process
  else
    echo "${SERVICE_NAME} is not running (${PIDFILE} does not exist)"
    return 1
  fi
}

send_cmd(){
  if is_running; then
    if [ -p ${FIFO} ]; then
      cmdid="FACTORIO_INIT_CMD_DELIMITER"
      # Whisper that unknown player
      echo "/w ${cmdid}" > ${FIFO}
      # Wait for factorio to read stdin
      sleep 1
      # Run the actual command
      echo $@ > ${FIFO}
      # Wait again, this might need more sleep for larger command output - time will tell (sorry future self for any head aches)
      sleep 1
      # Read the output file backwards - capture everything between the end of file until
      # factorio tells us our random command id player does not exist.
      # This also attempts to filter all non chat/command lines from the output
      response=$(sed "/Player ${cmdid} doesn't exist./q" <(tac ${CMDOUT}) |egrep -v "(${cmdid})|${NONCMDPATTERN}")
      echo "${response}"
    else
      echo "${FIFO} is not a pipe!"
      return 1
    fi
  else
    echo "Unable to send cmd to a stopped server!"
    return 1
  fi
}

cmd_players(){
  players=$(send_cmd "/p")
  if [ -z "${players}" ]; then
    echo "No players found!"
    return 1
  fi

  if [ "$1" == "online" ]; then
    echo "${players}" |egrep '.+ \(online\)$' |sed -e 's/ (online)//g'
  else
    echo "${players}"
  fi
}

check_permissions(){
  if [ ! -e "${BINARY}" ]; then
    echo "Can't find ${BINARY}. Please check your config!"
    exit 1
  fi

  if ! as_user "test -w ${WRITE_DIR}" ; then
    echo "Check Permissions. Cannot write to ${WRITE_DIR}"
    exit 1
  fi

  if ! as_user "touch ${PIDFILE}" ; then
    echo "Check Permissions. Cannot touch pidfile ${PIDFILE}"
    exit 1
  fi

  if ! [ -p ${FIFO} ]; then
    if ! as_user "mkfifo ${FIFO}"; then
      echo "Failed to create pipe for stdin, if applicable, remove ${FIFO} and try again"
      exit 1
    fi
  fi

  if ! as_user "touch ${CMDOUT}" ; then
    echo "Check Permissions. Cannot touch cmd output file ${CMDOUT}"
    exit 1
  fi
}

get_bin_version(){
  echo `as_user "$BINARY --version |egrep '^Version: [0-9\.]+' |egrep -o '[0-9\.]+' |head -n 1"`
}

get_bin_arch(){
  echo `as_user "$BINARY --version |egrep '^Binary version: ' |egrep -o '[0-9]{2}'"`
}

case "$1" in
  start)
    # Starts the server
    if is_running; then
      echo "Server already running."
      exit 0
    else
       if ! start_service; then
         echo "Could not start $SERVICE_NAME"
         exit 1
       fi
    fi
    ;;

  stop)
    # Stops the server
    if is_running; then
      send_cmd "Server is being shut down on request"
      if ! stop_service; then
        echo "Could not stop $SERVICE_NAME"
        exit 1
      fi
    else
      echo "No running server."
      exit 0
    fi
    ;;

  restart)
    # Restarts the server
    if is_running; then
      send_cmd "Server is being restarted on request, be right back!"
      if stop_service; then
        if ! start_service; then
          echo "Could not start $SERVICE_NAME after restart!"
          exit 1
        fi
      else
        echo "Failed to stop $SERVICE_NAME, aborting restart!"
        exit 1
      fi
    else
      echo "No running server to restart, starting it..."
      if ! start_service; then
        echo "Could not start $SERVICE_NAME"
        exit 1
      fi
    fi
    ;;

  status)
    # Shows server status
    if is_running; then
      echo "$SERVICE_NAME is running."
    else
      echo "$SERVICE_NAME is not running."
      exit 1
    fi
    ;;
  cmd)
    if [ -z "$2" ]; then
      trap 'clear' SIGTERM EXIT

      clear
      echo "Type any command or send chat messages"
      echo "This interactive commandline adds additional commands:"
      echo ""
      echo -e "\texit\t\texit the commandline"
      echo -e "\tclear\t\tclear the commandline screen"
      echo ""

      while true; do
        read -e -p "server@${SERVICE_NAME}> " cmd
        [ "${cmd}" == "exit" ] && exit 0
        [ "${cmd}" == "clear" ] && clear && continue
        echo ${cmd} > ${FIFO}
        sleep 1
      done
    else
      send_cmd "${@:2}"
    fi
    ;;
  chatlog)
    case $2 in
      --tail|-t)
        tail -F -n +0 ${CMDOUT} |egrep -v "${NONCMDPATTERN}"
        ;;
      *)
        cat ${CMDOUT} |egrep -v "${NONCMDPATTERN}"
        ;;
    esac
    ;;
  players)
    cmd_players
    ;;
  players-online|online)
    cmd_players online
    ;;
  new-game)
    if [ -z $2 ]; then
      echo "You must specify a save name for your new game"
      exit 1
    fi
    savename="${WRITE_DIR}/saves/$2"
    createsavecmd="$BINARY --create \"${savename}\""

    # Check if user wants to use custom map gen settings
    if [ $3 ]; then
      if [ -e "${WRITE_DIR}/$3" ]; then
        createsavecmd="$createsavecmd --map-gen-settings=${WRITE_DIR}/$3"
      else
        echo "Specified map gen settings json does not exist"
        exit 1
      fi
    fi

    # Check if user wants to use custom map settings
    if [ $4 ]; then
      if [ -e "${WRITE_DIR}/$4" ]; then
        createsavecmd="$createsavecmd --map-settings=${WRITE_DIR}/$4"
      else
        echo "Specified map settings json does not exist"
        exit 1
      fi
    fi

    # Stop Service
    if is_running; then
      send_cmd "Generating new save, please stand by"
      if ! stop_service; then
        echo "Failed to stop server, unable to create new save"
        exit 1
      fi
    fi

    if ! as_user "$createsavecmd"; then
      echo "Failed to create new game"
      exit 1
    else
      echo "New game created: ${savename}.zip"
    fi
    ;;

  save-game)
    savename="${WRITE_DIR}/saves/$2.zip"

    # Stop Service
    if is_running; then
      send_cmd "Stopping server to save game"
      if ! stop_service; then
        echo "Failed to stop server, unable to save as \"$2\""
        exit 1
      fi
    fi

    lastsave=$(find "${WRITE_DIR}/saves" -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -f2- -d" ")
    if ! as_user "cp \"${lastsave}\" \"${savename}\""; then
      echo "Error! Failed to save game"
      exit 1
    fi
    ;;

  load-save)
    # Ensure we get a new save file name
    newsave=${WRITE_DIR}/saves/$2.zip
    if [ ! -f "${newsave}" ]; then
      echo "Save \"${newsave}\" does not exist, aborting action!"
      exit 1
    fi

    # Since stopping the server causes a save we have to stop the server to do this
    if is_running; then
      send_cmd "Stopping server to load a saved game"
      if ! stop_service; then
        echo "Aborting, unable to stop $SERVICE_NAME"
        exit 1
      fi
    fi

    # Touch the new save file
    as_user "touch \"${newsave}\""
    ;;
  inv|invocation)
    echo ${INVOCATION}
    ;;
  help|--help|-h)
    usage
    ;;
  listcommands)
    echo `$0 help 2> /dev/null |egrep '^   ' |awk '{ print $1 }'`
    ;;
  listsaves)
    find ${WRITE_DIR} -type f -name "*.zip" -exec basename {} \; |sed -e 's/.zip//'
    ;;
  version)
    echo `get_bin_version`
    ;;
  *)
    echo "No such command!"
    echo
    usage
    exit 1
    ;;
esac

exit 0